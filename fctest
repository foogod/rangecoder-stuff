#!/usr/bin/python
from __future__ import division, print_function

import os
import struct
import argparse

import floatcoder

struct_fmt = 'f'

def spr_adjust(f, offset, spr):
    i = struct.unpack('I', struct.pack('f', f + offset))[0]
    discarded_bits = (1 << spr) - 1
    i &= 0xffffffff ^ discarded_bits
    return struct.unpack('f', struct.pack('I', i))[0] - offset

def dpr_adjust(f, offset, dpr):
    i = struct.unpack('I', struct.pack('f', f + offset))[0]
    dpr_exp = ((i >> 23) & 0xff) - 0x7f
    dpr_bits = dpr_exp - dpr
    if dpr_bits < 0:
        dpr_bits = 0
        i = 0
    elif dpr_bits > 23:
        dpr_bits = 23
    trim_bits = 23 - dpr_bits
    trim_mask = (1 << 32) - (1 << trim_bits)
    i &= trim_mask
    return struct.unpack('f', struct.pack('I', i))[0] - offset

def floathex(f):
    i = struct.unpack('I', struct.pack('f', f))[0]
    return "{:08x}".format(i)

parser = argparse.ArgumentParser(description='Test floatcoder.py')
parser.add_argument('infile', metavar='INFILE', type=str, help='Input file (raw data)')
parser.add_argument('outfile', metavar='OUTFILE', type=str, help='Output file (compressed data)')
parser.add_argument('--count', type=int, help='Number of floats to read from input')
parser.add_argument('--interleave', type=int, default=3, help='Stride for interleaved data')
parser.add_argument('--offset', type=float, default=0.0, help='Offset to add to values before encoding')
parser.add_argument('--spr', type=int, default=0, help='Static Precision Reduction value')
parser.add_argument('--dpr', type=int, default=None, help='Dynamic Precision Reduction floor exponent')
parser.add_argument('-v', '--verbose', action='store_true', help='Print debugging info to stderr')

args = parser.parse_args()

struct_fmt_size = struct.calcsize(struct_fmt)

floatcoder.verbose = args.verbose

infile = open(args.infile, 'rb')
outfile = open(args.outfile, 'wb')

if not args.count:
    size = os.fstat(infile.fileno()).st_size
    args.count = size // struct_fmt_size

print("Compressing {} floats (stride {}) from {!r} to {!r}...".format(args.count, args.interleave, args.infile, args.outfile))

#predictor = floatcoder.InterleavedLinearPredictor(args.interleave)
#predictor = floatcoder.InterleavedTrapezoidPredictor(args.interleave)
predictor = floatcoder.MultiPredictor(
    floatcoder.InterleavedLinearPredictor(3),
    floatcoder.InterleavedOrder2Predictor(3, weight=1.0),
    floatcoder.InterleavedTrapezoidPredictor(3),
)
if args.dpr is not None:
    enc = floatcoder.Float_Encoder_DPR(outfile, predictor, offset=args.offset, dpr=args.dpr)
else:
    enc = floatcoder.Float_Encoder_SPR(outfile, predictor, offset=args.offset, spr=args.spr)

for i in xrange(args.count):
    value = struct.unpack(struct_fmt, infile.read(struct_fmt_size))[0];
    enc.encode_float(value)
enc.done()

input_size = args.count * struct_fmt_size
outfile.flush()
output_size = os.fstat(outfile.fileno()).st_size

print("-- {} input bytes compressed to {} output bytes ({:.3}%)".format(input_size, output_size, (output_size / input_size) * 100))

infile.close()
outfile.close()

print("Verifying result...")

infile = open(args.infile, 'rb')
outfile = open(args.outfile, 'rb')

#predictor = floatcoder.InterleavedLinearPredictor(args.interleave)
#predictor = floatcoder.InterleavedTrapezoidPredictor(args.interleave)
predictor = floatcoder.MultiPredictor(
    floatcoder.InterleavedLinearPredictor(3),
    floatcoder.InterleavedOrder2Predictor(3, weight=1.0),
    floatcoder.InterleavedTrapezoidPredictor(3),
)
if args.dpr is not None:
    dec = floatcoder.Float_Decoder_DPR(outfile, predictor, offset=args.offset, dpr=args.dpr)
else:
    dec = floatcoder.Float_Decoder_SPR(outfile, predictor, offset=args.offset, spr=args.spr)

max_deviation = 0
for i in xrange(args.count):
    infile_value = struct.unpack(struct_fmt, infile.read(struct_fmt_size))[0];
    if args.dpr is not None:
        check_value = dpr_adjust(infile_value, args.offset, args.dpr)
    else:
        check_value = spr_adjust(infile_value, args.offset, args.spr)
    outfile_value = dec.decode_float()
    if check_value != outfile_value:
        print("VALUE ERROR: Value number {}: expected {} ({}), got {} ({}) (off by {})".format(i, check_value, floathex(check_value), outfile_value, floathex(outfile_value), outfile_value - check_value))
    max_deviation=max(max_deviation, abs(outfile_value - infile_value))
dec.done()

print("Maximum absolute deviation from input values: {}".format(max_deviation))
