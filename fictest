#!/usr/bin/python
from __future__ import division, print_function

import os
import struct
import argparse

import floatcoder
import intcoder

struct_fmt = 'f'

def floathex(f):
    i = struct.unpack('I', struct.pack('f', f))[0]
    return "{:08x}".format(i)

parser = argparse.ArgumentParser(description='Test floatcoder.py')
parser.add_argument('infile', metavar='INFILE', type=str, help='Input file (raw data)')
parser.add_argument('outfile', metavar='OUTFILE', type=str, help='Output file (compressed data)')
parser.add_argument('--count', type=int, help='Number of floats to read from input')
parser.add_argument('--interleave', type=int, default=3, help='Stride for interleaved data')
parser.add_argument('--minexp', type=int, default=-16, help='Minimum exponent in input data')
parser.add_argument('-v', '--verbose', action='store_true', help='Print debugging info to stderr')

args = parser.parse_args()

struct_fmt_size = struct.calcsize(struct_fmt)

floatcoder.verbose = args.verbose
intcoder.verbose = args.verbose

infile = open(args.infile, 'rb')
outfile = open(args.outfile, 'wb')

if not args.count:
    size = os.fstat(infile.fileno()).st_size
    args.count = size // struct_fmt_size

print("Compressing {} floats (stride {}) from {!r} to {!r}...".format(args.count, args.interleave, args.infile, args.outfile))

#predictor = intcoder.InterleavedLinearPredictor(args.interleave)
predictor = intcoder.MultiPredictor(
    intcoder.InterleavedLinearPredictor(args.interleave),
    intcoder.InterleavedSimplePredictor(args.interleave),
)
enc = floatcoder.FloatInt_Encoder(outfile, predictor, min_exp=args.minexp)

for i in xrange(args.count):
    value = struct.unpack(struct_fmt, infile.read(struct_fmt_size))[0];
    enc.encode_float(value)
enc.done()

input_size = args.count * struct_fmt_size
outfile.flush()
output_size = os.fstat(outfile.fileno()).st_size

print("-- {} input bytes compressed to {} output bytes ({:.3}%)".format(input_size, output_size, (output_size / input_size) * 100))

infile.close()
outfile.close()

print("Verifying result...")

infile = open(args.infile, 'rb')
outfile = open(args.outfile, 'rb')

#predictor = intcoder.InterleavedLinearPredictor(args.interleave)
predictor = intcoder.MultiPredictor(
    intcoder.InterleavedLinearPredictor(args.interleave),
    intcoder.InterleavedSimplePredictor(args.interleave),
)
dec = floatcoder.FloatInt_Decoder(outfile, predictor, min_exp=args.minexp)

max_deviation = 0
for i in xrange(args.count):
    infile_value = struct.unpack(struct_fmt, infile.read(struct_fmt_size))[0];
    check_value = infile_value #FIXME
    outfile_value = dec.decode_float()
    if check_value != outfile_value:
        print("VALUE ERROR: Value number {}: expected {} ({}), got {} ({}) (off by {})".format(i, check_value, floathex(check_value), outfile_value, floathex(outfile_value), outfile_value - check_value))
    max_deviation=max(max_deviation, abs(outfile_value - infile_value))
dec.done()

print("Maximum absolute deviation from input values: {}".format(max_deviation))
